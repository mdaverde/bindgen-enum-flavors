/* automatically generated by rust-bindgen 0.59.2 */

pub mod game {
    pub type Type = ::std::os::raw::c_uint;
    pub const win: Type = 0;
    pub const lose: Type = 1;
    pub const draw: Type = 2;
}
impl animal {
    pub const dog: animal = animal(0);
}
impl animal {
    pub const cat: animal = animal(1);
}
impl animal {
    pub const chicken: animal = animal(2);
}
impl animal {
    pub const squirrel: animal = animal(3);
}
impl animal {
    pub const moose: animal = animal(4);
}
impl ::std::ops::BitOr<animal> for animal {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        animal(self.0 | other.0)
    }
}
impl ::std::ops::BitOrAssign for animal {
    #[inline]
    fn bitor_assign(&mut self, rhs: animal) {
        self.0 |= rhs.0;
    }
}
impl ::std::ops::BitAnd<animal> for animal {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        animal(self.0 & other.0)
    }
}
impl ::std::ops::BitAndAssign for animal {
    #[inline]
    fn bitand_assign(&mut self, rhs: animal) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct animal(pub ::std::os::raw::c_uint);
impl planet {
    pub const earth: planet = planet(0);
}
impl planet {
    pub const jupiter: planet = planet(1);
}
impl planet {
    pub const saturn: planet = planet(2);
}
impl planet {
    pub const mars: planet = planet(3);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct planet(pub ::std::os::raw::c_uint);
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum color {
    purple = 0,
    red = 1,
    blue = 2,
    green = 3,
    yellow = 4,
    pink = 5,
    indigo = 6,
    brown = 7,
    black = 8,
    white = 9,
}
pub const meals_breakfast: meals = 0;
pub const meals_lunch: meals = 1;
pub const meals_dinner: meals = 2;
pub type meals = ::std::os::raw::c_uint;
